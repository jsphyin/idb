#!/usr/bin/bash

CLOUD_ARGS="-instances=boardgamedb-181002:us-central1:boardgamedb-data=tcp:3306"

function clean_up() {
    if [[ -z $KILL_CLOUD_PROXY ]] && [[ -z $IDB_CLOUD_PID ]]; then
        kill $IDB_CLOUD_PID
    fi
    exit
}

trap clean_up SIGINT

function display_help() {
    echo "usage: serve [OPTION]"
    echo ""
    echo "  -k, --kill-proxy    Kill the proxy process on exit"
    echo "  -h, --help          Display this help text"
}

function process_arguments() {
    # Process Arguments
    for arg in "$@"; do
        if [[ $arg == "--kill-proxy" ]] || [[ $arg == "-k" ]]; then
            KILL_CLOUD_PROXY=1
        elif [[ $arg == "--help" ]] || [[ $arg == "-h" ]]; then
            display_help
            exit
        fi
    done
}

function cloud_proxy() {
    # Check if proxy is already running
    if [[ -z $(pidof "cloud_sql_proxy") ]]; then
        printf "Starting Cloud SQL Proxy..."

        if [[ -f "cloud_sql_proxy" ]]; then
            # Found in local directory
            CLOUD_SQL_PROXY="./cloud_sql_proxy"
        elif hash "cloud_sql_proxy" >/dev/null 2>&1; then
            # Found in path
            CLOUD_SQL_PROXY="cloud_sql_proxy"
        else
            echo "Failed"
            echo "Could not find cloud_sql_proxy binary"
            exit
        fi

        eval $CLOUD_SQL_PROXY $CLOUD_ARGS /dev/null 2>&1 &

        # Wait for up to 5 seconds for the cloud proxy to start up
        CLOUD_TIMEOUT=5
        while [[ -z $(pidof "cloud_sql_proxy") ]] && [[ CLOUD_TIMEOUT > 0 ]]; do
            sleep 1
        done

        # Try to grab the PID
        IDB_CLOUD_PID=$(pidof "cloud_sql_proxy")
        if [[ -z $IDB_CLOUD_PID ]]; then
            # Failed to grab PID
            echo "Failed"
            echo "Exiting..."
            exit
        fi
        echo "Done"
    else
        # Grab the PID in case KILL_CLOUD_PROXY is set
        echo "Existing instance of Cloud SQL Proxy"
        IDB_CLOUD_PID=$(pidof "cloud_sql_proxy")
    fi
}

function flask_server() {
    # Set environment variable for Flask to connect to database
    export SQLALCHEMY_DATABASE_URI=mysql+pymysql://root:boardgamers@127.0.0.1:3306/proddata

    # Start Flask Server
    echo "Starting Flask Backend"
    python main.py
}

function main() {
    cloud_proxy
    flask_server
    clean_up
}

process_arguments "$@"
main
